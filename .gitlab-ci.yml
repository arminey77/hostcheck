default:
  image:
    name: repo.asax.ir/bitnami/git:2.43.0
  tags:
    - stage-kubernetes-builds

variables:
  ANSIBLE_FORCE_COLOR: 'true'
  ANSIBLE_PYTHON_INTERPRRTER: /usr/bin/python3
  ANSIBLE_USER: user
  ANSIBLE_SSH_PASS: password
  ANSIBLE_BECOME_PASS: password
  ANSIBLE_CHECK_MODE: 'true'
  USERNAME: 'a.molaei'
  PASSWORD: 'glpat-iNGinWxgLtmX-ymo5zDL'


stages:
  - update_submodule
  - ansible_run

update_submodule_job:
  stage: update_submodule
  script:
    # Configure Git with the CI-specific user identity
    - git config user.email "bot@gitops.asax.ir"
    - git config user.name "GitLab CI Bot"

    # Extract the SSH URL from .gitmodules and convert it to HTTPS format using provided auth variables
    - SUBMODULE_SSH_URL=$(git config --file .gitmodules --get submodule.hostcheck.url)
    - SUBMODULE_HTTPS_URL=$(echo $SUBMODULE_SSH_URL | sed -e "s/git@\(.*\):/https:\/\/$GITLAB_AUTH_USERNAME:$GITLAB_AUTH_TOKEN@\1\//")
    - git config submodule.hostcheck.url "$SUBMODULE_HTTPS_URL"
    - git submodule update --init --recursive --remote

    # Directly use git diff to check for changes and conditionally execute the next steps
    - >
      if ! git diff --quiet; then
        # Checkout a new branch for the submodule update
        BRANCH_NAME="submodule-update-$(date +%Y%m%d-%H%M%S)"
        git checkout -b $BRANCH_NAME

        # Commit the updated submodule reference
        SUBMODULE_COMMIT=$(git -C hostcheck rev-parse HEAD)
        git commit -am "Update submodule to latest commit: $SUBMODULE_COMMIT [skip ci]"

        # Push the new branch
        git push -o merge_request.create -o merge_request.target=main https://$GITLAB_AUTH_USERNAME:$GITLAB_AUTH_TOKEN@$(echo $CI_PROJECT_URL | sed -e 's|https://||') HEAD
      else
        echo "No changes in the submodule. Skipping commit and push.";
      fi
  only:
    - main

ansible_run:
  stage: ansible_run
  tags:
    - stage-awx-legacy
  image:
    name: repo.asax.ir/platform/asapython:3.12.2-slim-bullseye
    entrypoint: [""]
  when: manual
  script:
   # Clone submodules
    - REPO_DIR="/builds/platfrom-team/kubernetes-platform/kubernetes-infrastructure/observability/hostcheck-inventory-stage"
    - git config --global --add safe.directory $REPO_DIR
    - cd $REPO_DIR
    - SUBMODULE_SSH_URL=$(git config --file .gitmodules --get submodule.hostcheck.url)
    - PROTO=$(echo $SUBMODULE_SSH_URL | sed -e's,^\(.*://\).*,\1,g')
    - URL=$(echo ${SUBMODULE_SSH_URL/$PROTO/})
    - NEW_SUBMODULEURL="${PROTO}${USERNAME}:${PASSWORD}@${URL}"
    - git config --file .gitmodules submodule.hostcheck.url $NEW_SUBMODULEURL
    - echo $NEW_SUBMODULEURL
    - echo ${PASSWORD}
    - echo ${USERNAME}
    - git submodule update --init --recursive
    #- ls
    #- pwd
    - cd hostcheck
    #- ls
    #- which python3
    #- ls /usr/local/bin/python3
    #- python3 -m venv .venv
    #- source .venv/bin/activate
    #- pip3 install -r requirements.txt  --default-timeout=180 --index-url=https://$PYPI_REGISTRY_USER:$PYPI_REGISTRY_PASSWORD@$PYPI_REGISTRY/repository/pypi-group1/simple
    #- ansible-playbook -i ../inventory main.yml -b --extra-vars "ansible_user=$ANSIBLE_USER ansible_ssh_pass=$ANSIBLE_SSH_PASS ansible_become_pass=$ANSIBLE_BECOME_PASS ansible_check_mode=$ANSIBLE_CHECK_MODE"
  only:
    - add-ansible-runner
